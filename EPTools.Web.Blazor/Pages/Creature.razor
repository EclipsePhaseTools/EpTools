@page "/creature"
@inject EPTools.Common.Services.StatBlockTemplateService templatesService
<h3>Creature Template</h3>

<div>
    @foreach (var item in templates)
    {
        <button @onclick="() => ResetTemplate(item.TemplateName)">@(item.TemplateName)</button>
    }
</div>


<textarea rows="10" cols="54" id="text" @bind-value="MyText" @bind-value:event="oninput" />

<div>
    <div class="creature name">@(GetCreatureName(MyText ?? ""))</div>
    <div class='entity creature'>
        @if (MyText == null)
        {
            <span>Loading</span>
        }
        else
        {
            @((MarkupString)ParseInput(MyText))
        }

    </div>
</div>

@code {

    private string MyText
    {
        get; set;
    }

    private List<EPTools.Common.Models.DTO.StatBlockTemplate> templates { get; set; } = new List<EPTools.Common.Models.DTO.StatBlockTemplate>();

    private void ResetTemplate(string Name)
    {
        MyText = templates.First(x => x.TemplateName == Name).Template;
    }

    protected override async Task OnInitializedAsync()
    {
        templates = await templatesService.GetStatBlockTemplates();

        templates = templates.Where(x => x.TemplateType == "Creature").ToList();

        MyText = templates.First().Template;
    }

    private string ParseInput(string str)
    {
        var sb = new System.Text.StringBuilder();
        var splits = str.Split(Environment.NewLine);

        foreach (var item in splits)
        {
            if (item.ToLower().StartsWith("name:"))
            {
                continue;
            }
            if (item.StartsWith("--"))
            {
                sb.Append("<div class='divider'><div class='hex'><span>&#x2B22;</span></div><div class='hex2'><span>&#x2B22;</span></div></div>");
            }
            else
            {
                sb.Append("<div class='section'>");

                var newstring = item;

                var SuperScript = new System.Text.RegularExpressions.Regex(@"(\^\w{0,3})");
                var FirstBold = new System.Text.RegularExpressions.Regex(@"(^.{0,20}?:)");
                var GeneralBold = new System.Text.RegularExpressions.Regex(@"(\w{0,20}?:)");

                newstring = SuperScript.Replace(newstring, "<sup>$1</sup>");
                newstring = newstring.Replace("^", "");
                newstring = FirstBold.Replace(newstring, "<b>$1</b>");

                if (GeneralBold.Matches(newstring).Count > 1)
                {
                    foreach (var match in GeneralBold.Matches(newstring).Skip(1).Reverse())
                    {
                        newstring = newstring.Replace(match.Index, match.Length, $"<b>{match.Value}</b>");
                    }
                }
                sb.AppendLine(newstring);
                sb.Append("</div>");
            }


        }

        return sb.ToString();
    }

    private string GetCreatureName(string str)
    {
        var sb = new System.Text.StringBuilder();
        var splits = str.Split(Environment.NewLine);


        foreach (var item in splits)
        {
            if (item.ToLower().StartsWith("name:"))
            {
                return item.Split(':').Last().Trim();
            }

        }

        return "";
    }
}
